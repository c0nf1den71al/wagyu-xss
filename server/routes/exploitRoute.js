const router = require("express").Router();
const { getQueue, processCompleteCommands, processFindings } = require("../controllers/exploitControllers");
const { createEvent } = require("../controllers/eventControllers");
const { checkIn } = require("../controllers/hostControllers");

router.post("/:id", async (req, res) => {
    if(req.params.id){
        if(req.body.commands !== []) {
            checkIn(req.params.id)
            await processCompleteCommands(req.params.id, req.body.commands);
            req.body.commands.forEach(command => {
                if(command.status === "success") {
                    createEvent("Team Server", `The command '${command.name}' was successfully executed against the host '${req.params.id}' by the user '${command.author}'.`, "success");
                } else if (command.status === "error") {
                    createEvent("Team Server", `The command '${command.name}' was unsuccessfully executed against the host '${req.params.id}' by the user '${command.author}'.`, "error");
                }

                if(command.data !== undefined) {
                    try {
                        const parsedData = JSON.parse(command.data);

                        if (parsedData !== {}) {
                            for (let key in parsedData) {
                                if (parsedData[key].value !== "" && parsedData[key].value !== undefined) {
                                    processFindings(parsedData, command.author, req.params.id);
                                } else {
                                    createEvent("Team Server", `The command '${command.name}' returned no results. `, "warning");
                                }
                            }
                        }
                        
                    } catch (err) {
                        createEvent("Team Server", `Error adding finding for the host '${req.params.id}': ${err.message}`, "error");
                    }
                }
            })
        }

        await getQueue(req.params.id).then(queue => {
            res.status(200).json(queue);
        }).catch(err => {
            res.status(500).send(err);
        });
    }
});

module.exports = router;